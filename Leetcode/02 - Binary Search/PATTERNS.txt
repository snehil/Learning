// Basic Binary Search. Problem - https://leetcode.com/problems/binary-search/
        int left=0;
        int right=nums.length-1;
        
        while(left<=right) {
            int mid = left + (right-left)/2;
            
            if (target<nums[mid]) {
                right = mid-1;
            } else if (target>nums[mid]) {
                left = mid+1;
            } else {
                return mid;
            }
        }
        
        return -1;

// Find minimum in rorated sorted array. Problem - https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
// Explanation: https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/discuss/158940/Beat-100%3A-Very-Simple-(Python)-Very-Detailed-Explanation
        int left=0;
        int right=nums.length-1;
        
        while (left<right) {
            int mid = left + (right-left)/2;
        
            if (nums[mid]>nums[right]) {
                left = mid+1;
            } else {
                right=mid;
            }     
        }
        
        return nums[right];

// SOLVE ABOVE with DUPLICATES: (See solution for 154-HARD)
        int left=0;
        int right=nums.length-1;
        
        while (left<right) {
            int mid = left + (right-left)/2;
        
            if (nums[mid]>nums[right]) {
                left = mid+1;
            } else {
                right = nums[right] != nums[mid] ? mid : right-1; // handles duplicate case
            }     
        }
        
        return nums[right];


