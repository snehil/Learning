https://leetcode.com/discuss/general-discussion/1122034/important-graph-algorithm-notes-for-interview
https://leetcode.com/discuss/general-discussion/655708/Graph-For-Beginners-Problems-or-Pattern-or-Sample-Solutions

Graph patterns, problems and template solutions (LC post) - https://leetcode.com/discuss/study-guide/655708/Graph-For-Beginners-Problems-or-Pattern-or-Sample-Solutions

==============

Detecting cycles in graphs - 

    Weighted undirected graphs - Union/Find Kruskals minimum spanning tree algorithm. 
                            Sort all edges by weight. Process each edge, color nodes that belong to same group. 
                            If both the nodes are already colored for a new edge, then a cycle exists!
                    Explanation - https://www.youtube.com/watch?v=JZBQLXgSGfs
                    Union/Find Code implementation - https://www.youtube.com/watch?v=KbFlZYCpONw

    Directed graphs - Topological sort (i.e. Indegree and BFS algorithm). If final answer size != no. of vertices then 
                    cycle exists!
                    Explanation - https://www.youtube.com/watch?v=tggiFvaxjrY
                    Code - See course schedule code below!

=======================

Shank's Graph patterns and code: 

https://docs.google.com/spreadsheets/d/104AxQUh2hjgKqdQ_gyx3Nv8JtIhmQdLKnxIwwlV3_Cw/edit#gid=1829836059

Find if path exists in a Graph:
	- DFS 
	- BFS
	- Disjoint Set 

Minimum Spanning Tree (Min. cost to connect all points)
	- Kruskal's
	- Prim's  

Single Source shortest path 
	- Dijkstra's (Only positive weights) - Network delay time 
	- Bellman-Ford - Cheapest Flights within K stops 

Topological Sort 
	- Kahn's algorithm (Course Schedule II)	

--------

SHANK's Graph notes:

Applies to all
* Use int[][] offsets = new int[][]{{-1,0}, {1,0}, {0,1}, {0,-1}}; trick

DFS
* Cycle Detection: 
    - Use kahns algorithm for directed graphs.
    - or visited[] int array trick using dfs for directed graphs.(use int[] instead of boolean[]. 0: unvisited, 1: visiting, 2: visited). 
      Here while doing dfs, if you end up at a node where visited[i] = 1, it means you came back to same node, hence a cycle.
    - For undirected graphs, you can use union find. While union-izing if union method returns false, it means that the two vertices that you tried to unionize
      are in same component -> aka a cycle.
* Look at whats changing in the recusive function. Add those to Stack<> to convert recursive DFS to iterative DFS.
* Time Complexity is O(V+ E)

BFS
* Use Queue.
* use size trick while peeling layer by layer. That is add some elements to q and then take int size = q.size and iterate over this size. I.e., layer by layer. 
Disjoint Set(unionfind)
* Has two important methods union and find
* find can be implemented both recursively or iteratively. Recursive is easier.
* Also this has two important optimizations: path compression and weighted union.
* If both are implemented then you get amortized time complexity of O(1) for both find and union operations.
* Proving the above time complexity apparently is hard. Its bounded by something called as inverse ackermann function which grows very slowly.
* In fact for large(very large) values of n, this function will still have a value of 4.
* There is a loose bound proof on wiki using iterated log. lg* = 1 + lg* (log n). If n <= 1, this is 0.
* Time Complexity is O(V+ E)

Shortest Path
* For unweighted graphs, typical BFS will give you shortest path. Make sure to use dist array.
* For weighted graphs, Dijkstra, Bellman ford and floyd warshall work.
* Dijkstra doesnt work negative weights(0 and negative). It also doesnt work for negative cycles.
* Bellman ford works for negative weights. However this also doesnt work for negative cycles. However it can detect negative cycles.
* In fact any algorithm will not work for negative cycles because the shortest path given by algorithm will be wrong, all we have to do is circle negative cycle one more time to get even low shortest path.
* Dijkstra and bellman ford both are single source shortest path algorithms. Meaning for a given src, they will find shortest distances to all vertices from that src only.
* Floyd however is all source all destination shortest path algorithms. Once you run floyd warshall, you will know the shortest distance from any src to any dest. 
There's also algos about min spanning trees(prims, kruskals) and strongly connected components(kosaraju, tarjan), but I dont think these are that important. In fact even in shortest path algos, I think only dijkstra and maybe bellman ford are important unless you are very unlucky.

#### Adjaceny List

- Undirected Graph:

    Map<Integer, List<Integer>> graph = new HashMap<>();
    for(int i = 0; i < vertexCount; i++) graph.put(i, new ArrayList<>());

    for(int[] edge : edges) {
        int source = edge[0];
        int dest = edge[1];
        graph.get(source).add(dest);
        graph.get(dest).add(source);
    }
    
- Directed Graph:

    Map<Integer, List<Integer>> graph = new HashMap<>();
    for(int i = 0; i < vertexCount; i++) graph.put(i, new ArrayList<>());

    for(int[] edge : edges) {
        int source = edge[0];
        int dest = edge[1];
        graph.get(source).add(dest);
        // note in a directed graph, edge goes only one way, so need to add this in both directions
    }
    
- Undirected Weighted Graph: Let's say the graph also has weights associated with each edge. Then use the below code for representation:
e
    // Here int[] will be of size 2. It will be of the form [dest, weight].
    // i.e., arr[0] will be the destination and arr[1] will be the weight.
    Map<Integer, List<int[]>> graph = new HashMap<>();
    for(int i = 0; i < vertexCount; i++) graph.put(i, new ArrayList<>());

    for(int[] edge : edges) {
        int source = edge[0];
        int dest = edge[1];
        int  weight = edge[2];
        graph.get(source).add(new int[]{dest, weight});
        graph.get(dest).add(new int[]{source, weight});
    }
    
- Directed Weighted Graph: Let's say the graph also has weights associated with each edge. Then use the below code for representation:

    // Here int[] will be of size 2. It will be of the form [dest, weight].
    // i.e., arr[0] will be the destination and arr[1] will be the weight.
    Map<Integer, List<int[]>> graph = new HashMap<>();
    for(int i = 0; i < vertexCount; i++) graph.put(i, new ArrayList<>());

    for(int[] edge : edges) {
        int source = edge[0], dest = edge[1], weight = edge[2];
        graph.get(source).add(new int[]{dest, weight});
        // note as mentioned before in a directed graph, edge goes only one way, so need to add this in both directions
    }
    
#### Adjaceny Matrix

In this representation, we have a 2D array of size vertexCount x vertexCount. The value at index i, j will be 1 if there is an edge between vertex i and vertex j. Otherwise, it will be 0. If its weighted, then instead of 1, we will have the weight of the edge. Below is the code to represent the variations of the graph:
           
- Undirected Graph:

    int[][] graph = new int[vertexCount][vertexCount];
    for(int[] edge : edges) {
        int source = edge[0;
        int dest = edge[1];
        graph[source][dest] = 1;
        graph[dest][source] = 1;
    }
    
- Directed Graph:

    int[][] graph = new int[vertexCount][vertexCount];
    for(int[] edge : edges) {
        int source = edge[0]; 
        int dest = edge[1];
        graph[source][dest] = 1;
        // since this is directed, edge will be added only in one direction
    }
    
- Undirected Weighted Graph:

    int[][] graph = new int[vertexCount][vertexCount];
    for(int[] edge : edges) {
        int source = edge[0]; 
        int dest = edge[1];
        int weight = edge[2];
        graph[source][dest] = weight;
        graph[dest][source] = weight;
    }
    
- Directed Weighted Graph:

    int[][] graph = new int[vertexCount][vertexCount];
    for(int[] edge : edges) {
        int source = edge[0]; 
        int dest = edge[1];
        int weight = edge[2];
        graph[source][dest] = weight;
        // since this is directed, edge will be added only in one direction
    }
    
#### DFS Using Recursion

    // assume the graph is already created and is present in graph variable with its data type as shown below
	Map<Integer, List<Integer>> graph = new HashMap<>(); 
	int n = 10; // assume the number of vertices is n

	// DFS
	boolean[] visited = new boolean[n];
	for(int i = 0; i < n; i++) {
	    if(!visited[i]) dfs(i, graph, visited);
	}

	// and the dfs method could be as shown below
	private void dfs(int source, Map<Integer, List<Integer>> graph, boolean[] visited) {
	    visited[source] = true;
	    for(int dest : graph.get(source)) {
	        if(!visited[dest]) dfs(dest, graph, visited);
	    }
	}

#### DFS Using Stack

	// assume the graph is already created and is present in graph variable with its data type as shown below
	Map<Integer, List<Integer>> graph = new HashMap<>();
	int n = 10; // assume the number of vertices is n

	Stack<Integer> stack = new Stack<>();
	stack.push(source); // push the starting node onto stack
	while(!stack.isEmpty()) {
	    int source = stack.pop();
	    if(!visited[source]) {
	        visited[source] = true;
	        for(int dest : graph.get(source)) stack.push(dest);
	    }
	}

### BFS

In BFS, we visit graph in a breadth first way layer by layer. BFS is mainly implemented using a queue. We use a queue to keep track of the nodes to be visited. The below image shows the BFS traversal of the graph. The below image shows the BFS traversal of the graph.

![BFS Traversal](./assets/bfs.gif)

#### BFS Implementation Using Queue

	// assume the graph is already created and is present in graph variable with its data type as shown below
	Map<Integer, List<Integer>> graph = new HashMap<>();
	int n = 10; // assume the number of vertices is n

	// BFS
	boolean[] visited = new boolean[n];
	Queue<Integer> queue = new LinkedList<>();
	queue.offer(source);
	while(!queue.isEmpty()) {
	    int source = queue.poll();
	    if(!visited[source]) {
	        visited[source] = true;
	        for(int dest : graph.get(source)) queue.offer(dest);
	    }
	}

----------SHANKs Example problem solutions -----------

https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/

class Solution {


    // TC: O(V + E), SC: O(V + E)
    public int countComponents_DFS(int n, int[][] edges) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) graph.put(i, new ArrayList<>());

        for (int[] edge : edges) {
            int source = edge[0];
            int dest = edge[1];
            graph.get(source).add(dest);
            graph.get(dest).add(source);
        }

        int count = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                bfs(i, graph, visited);
                count++;
            }
        }
        return count;
    }

    private void dfsIterative(Map<Integer, List<Integer>> graph, int i, boolean[] visited) {
        Stack<Integer> stack = new Stack<>();
        stack.push(i);
        while (!stack.isEmpty()) {
            int v = stack.pop();
            visited[v] = true;
            for (int neighbor : graph.get(v)) {
                if (!visited[neighbor]) stack.push(neighbor);
            }
        }
    }

    private void dfs(int vertex, Map<Integer, List<Integer>> graph, boolean[] visited) {
        visited[vertex] = true;

        for (int neighbor : graph.get(vertex)) {
            if (!visited[neighbor]) dfs(neighbor, graph, visited);
        }
    }


    private void bfs(Map<Integer, List<Integer>> graph, boolean[] visited, int i) {
        Queue<Integer> q = new LinkedList<>();
        q.offer(i);
        while (!q.isEmpty()) {
            int vertex = q.poll();
            visited[vertex] = true;
            for (int neighbor : graph.get(vertex)) {
                if (!visited[neighbor]) q.offer(neighbor);
            }
        }
    }

}

------------------------------------
^^Course Schedule

class Solution {
    // TC: O(V + E), SC: O(V + E), v is numCourses, E is prerequisites.length
    public boolean canFinish_TopSortApproach(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        Map<Integer, Integer> indegreeMap = new HashMap<>();
        int removedNodes = 0;

        for (int i = 0; i < numCourses; i++) {
            graph.put(i, new ArrayList<>());
            indegreeMap.put(i, 0);
        }
        for (int[] pre : prerequisites) {
            int source = pre[1], dest = pre[0];
            graph.get(source).add(dest);
            indegreeMap.put(dest, indegreeMap.get(dest) + 1);
        }

        Queue<Integer> q = new LinkedList<>();
        indegreeMap.forEach((v, indegreeCount) -> {
            if (indegreeCount == 0) q.add(v);
        });

        while (!q.isEmpty()) {
            int vertex = q.poll();
            removedNodes++;

            for (int neighbor : graph.get(vertex)) {
                indegreeMap.put(neighbor, indegreeMap.get(neighbor) - 1);

                if (indegreeMap.get(neighbor) == 0) {
                    q.add(neighbor);
                }
            }
        }

        if (removedNodes!=numCourses) {
            System.out.println("There is a cycle in the graph!");
        }

        return removedNodes == numCourses;
    }

}

Union Find Java example: 

    ------ Union Find code (William Fiset) ------


        public class UnionFind {

          private int size;
          private int[] sz;
          private int[] id;
          private int numComponents;

          public UnionFind(int size) {

            if (size <= 0) throw new IllegalArgumentException("Size <= 0 is not allowed");

            this.size = numComponents = size;
            sz = new int[size];
            id = new int[size];

            for (int i = 0; i < size; i++) {
              id[i] = i; // Link to itself (self root)
              sz[i] = 1; // Each component is originally of size one
            }
          }

          // Find which component/set 'p' belongs to, takes amortized constant time.
          public int find(int p) {
            int root = p;

            while (root != id[root]) {
                root = id[root];
            }

            while (p != root) {
              int next = id[p];
              id[p] = root;
              p = next;
            }

            return root;
          }

          // This is an alternative recursive formulation for the find method
          // public int find(int p) {
          //   if (p == id[p]) return p;
          //   return id[p] = find(id[p]);
          // }

          public boolean connected(int p, int q) {
            return find(p) == find(q);
          }

          public int componentSize(int p) {
            return sz[find(p)];
          }

          public int size() {
            return size;
          }

          public int components() {
            return numComponents;
          }

          public void unify(int p, int q) {
            if (connected(p, q)) return;

            int root1 = find(p);
            int root2 = find(q);

            // Merge smaller component/set into the larger one.
            if (sz[root1] < sz[root2]) {
              sz[root2] += sz[root1];
              id[root1] = root2;
              sz[root1] = 0;
            } else { 
              sz[root1] += sz[root2];
              id[root2] = root1;
              sz[root2] = 0;
            }

            numComponents--;
          }
        }

---- Shanks code ---

class DisjointSetUnion{
    private int[] parent;
    private int N;
    
    public DisjointSetUnion(int n){
        this.N = n;
        this.parent = new int[this.N];
        for(int i = 0; i < this.N; i++){
            this.parent[i] = i;
        }
    }
    
    public boolean areConnected(int u, int v){
        return find(u) == find(v);
    }
    
    public void union(int u, int v){
        if(u != v){
            int a = find(u);
            int b = find(v);
            parent[a] = b;
        }
    }
    
    private int find(int u){
        int x = u;
        while(x != this.parent[x]){
            x = this.parent[x];
        }
        
        this.parent[u] = x;
        return x;
    }
}

class Solution {
    public boolean validPath(int n, int[][] edges, int start, int end) {
        DisjointSetUnion set = new DisjointSetUnion(n);
        for(int[] edge : edges){
            set.union(edge[0], edge[1]);
        }
        
        return set.areConnected(start, end);
    }
}

===============================
Graph Problems For Practice

Sharing some topic wise good Graph problems and sample solutions to observe on how to approach.

List: https://leetcode.com/list/x1wy4de7

Union Find:

Identify if problems talks about finding groups or components.

https://leetcode.com/problems/friend-circles/
https://leetcode.com/problems/redundant-connection/
https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/
https://leetcode.com/problems/number-of-operations-to-make-network-connected/
https://leetcode.com/problems/satisfiability-of-equality-equations/
https://leetcode.com/problems/accounts-merge/

All the above problems can be solved by Union Find algorithm with minor tweaks.
Below is a standard template for union find problems.

 class Solution {
 	vector<int>parent;
 	int find(int x) {
 		return parent[x] == x ? x : find(parent[x]);
 	}
 public:
 	vector<int> findRedundantConnection(vector<vector<int>>& edges) {

 		int n = edges.size();

 		parent.resize(n+1, 0);
 		for (int i = 0; i <= n; i++)
 			parent[i] = i;

 		vector<int>res(2, 0);
 		for (int i = 0; i < n; i++) {
 			int x = find(edges[i][0]);
 			int y = find(edges[i][1]);
 			if (x != y)
 				parent[y] = x;
 			else {
 				res[0] = edges[i][0];
 				res[1] = edges[i][1];
 			}
 		}

 		return res;
 	}
 };

Depth First Search

Start DFS from nodes at boundary:
https://leetcode.com/problems/surrounded-regions/
https://leetcode.com/problems/number-of-enclaves/

 class Solution {
 	int rows, cols;
 	void dfs(vector<vector<int>>& A, int i, int j) {
 		if (i < 0 || j < 0 || i >= rows || j >= cols)
 			return;

 		if (A[i][j] != 1) 
 			return;

 		A[i][j] = -1;
 		dfs(A, i+1, j);
 		dfs(A, i-1, j);
 		dfs(A, i, j+1);
 		dfs(A, i, j-1);
 	}
 public:
 	int numEnclaves(vector<vector<int>>& A) {

 		if (A.empty()) return 0;

 		rows = A.size();
 		cols = A[0].size();
 		for (int i = 0; i < rows; i++) {
 			for (int j = 0; j < cols; j++) {
 				if (i == 0 || j == 0 || i == rows-1 || j == cols-1)
 					dfs(A, i, j);
 			}
 		}

 		int ans = 0;
 		for (int i = 0; i < rows; i++) {
 			for (int j = 0; j < cols; j++) {
 				if (A[i][j] == 1)
 					ans++;
 			}
 		}

 		return ans;
 	}
 };
Time taken to reach all nodes or share information to all graph nodes:
https://leetcode.com/problems/time-needed-to-inform-all-employees/

 class Solution {
 	void dfs(unordered_map<int, vector<int>>&hm, int i, vector<int>& informTime, int &res, int curr) {

 		curr += informTime[i];
 		res = max(res, curr);

 		for (auto it = hm[i].begin(); it != hm[i].end(); it++)
 			dfs(hm, *it, informTime, res, curr);
 	}
 public:
 	int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {

 		unordered_map<int, vector<int>>hm;
 		for (int i = 0; i < n; i++)
 			if (manager[i] != -1) hm[manager[i]].push_back(i);

 		int res = 0, curr = 0;
 		dfs(hm, headID, informTime, res, curr);
 		return res;
 	}
 };
DFS from each unvisited node/Island problems
https://leetcode.com/problems/number-of-closed-islands/
https://leetcode.com/problems/number-of-islands/
https://leetcode.com/problems/keys-and-rooms/
https://leetcode.com/problems/max-area-of-island/
https://leetcode.com/problems/flood-fill/

 class Solution {
 	void dfs(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int m, int n) {
 		if (i < 0 || i >= m || j < 0 || j >= n) return;
 		if (grid[i][j] == '0' || visited[i][j]) return;
 		visited[i][j] = true;
 		dfs(grid, visited, i+1, j, m, n);
 		dfs(grid, visited, i, j+1, m, n);
 		dfs(grid, visited, i-1, j, m, n);
 		dfs(grid, visited, i, j-1, m, n);
 	}
 	public:
 	int numIslands(vector<vector<char>>& grid) {
 		if (grid.empty()) return 0;

 		int m = grid.size();
 		int n = grid[0].size();
 		vector<vector<bool>>visited(m, vector<bool>(n, false));

 		int res = 0;
 		for (int i = 0; i < m; i++) {
 			for (int j = 0; j < n; j++) {
 				if (grid[i][j] == '1' && !visited[i][j]) {
 					dfs(grid, visited, i, j, m, n);
 					res++;
 				}
 			}
 		}

 		return res;
 	}
 	};
Cycle Find:
https://leetcode.com/problems/find-eventual-safe-states/

 class Solution {
 	bool dfs(vector<vector<int>>& graph, int v, vector<int>& dp) {

 		if (dp[v])
 			return dp[v] == 1;

 		dp[v] = -1;

 		for (auto it = graph[v].begin(); it != graph[v].end(); it++)
 			if (!dfs(graph, *it, dp))
 				return false;

 		dp[v] = 1;

 		return true;
 	}
 public:
 	vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
 
 		int V = graph.size();

 		vector<int>res;
 		vector<int>dp(V, 0);

 		for (int i = 0; i < V; i++) {    
 			if (dfs(graph, i, dp))
 				res.push_back(i);
 		}

 		return res;
 	}
};

Breadth First Search

Shortest Path:
https://leetcode.com/problems/01-matrix/
https://leetcode.com/problems/as-far-from-land-as-possible/
https://leetcode.com/problems/rotting-oranges/
https://leetcode.com/problems/shortest-path-in-binary-matrix/

Start BFS from nodes from which shortest path is asked for.
Below is the sample BFS approach to find the path.

class Solution {
	public:
	vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {

		if (matrix.empty()) return matrix;
		int rows = matrix.size();
		int cols = matrix[0].size();
		queue<pair<int, int>>pq;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (matrix[i][j] == 0) {
					pq.push({i-1, j}), pq.push({i+1, j}), pq.push({i, j-1}), pq.push({i, j+1}); 
				}
			}
		}

		vector<vector<bool>>visited(rows, vector<bool>(cols, false));
		int steps = 0;
		while (!pq.empty()) {
			steps++;
			int size = pq.size();
			for (int i = 0; i < size; i++) {
				auto front = pq.front();
				int l = front.first;
				int r = front.second;
				pq.pop();
				if (l >= 0 && r >= 0 && l < rows && r < cols && !visited[l][r] && matrix[l][r] == 1) {
					visited[l][r] = true;
					matrix[l][r] = steps;
					pq.push({l-1, r}), pq.push({l+1, r}), pq.push({l, r-1}), pq.push({l, r+1});
				}
			}
		}

		return matrix;
	}
};
Graph coloring/Bipartition
https://leetcode.com/problems/possible-bipartition/
https://leetcode.com/problems/is-graph-bipartite/

Problems asks to check if its possible to divide the graph nodes into 2 groups
Apply BFS for same. Below is a sample graph coloring approach.

 class Solution {
 	public:
 		bool isBipartite(vector<vector<int>>& graph) {
 			int n = graph.size();
 			vector<int>color(n, -1);

 			for (int i = 0; i < n; i++) {
 				if (color[i] != -1) continue;

 				color[i] = 1;
 				queue<int>q;
 				q.push(i);

 				while (!q.empty()) {
 					int t = q.front();
 					q.pop();

 					for (int j = 0; j < graph[t].size(); j++) {
 						if (color[graph[t][j]] == -1) {
 							color[graph[t][j]] = 1-color[t];
 							q.push(graph[t][j]);
 						} else if (color[graph[t][j]] == color[t]) {
 							return false;
 						}
 					}
 				}
 			}

 			return true;
 		}
 	};
Topological Sort:
Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0

https://leetcode.com/problems/course-schedule/
https://leetcode.com/problems/course-schedule-ii/

Below is sample approach. Find if cycle is present, if not apply topological sort.

 class Solution {
 	int V;
 	list<int>*adj;
 	
 	bool isCyclicUtil(int v, vector<bool>&visited, vector<bool>&recStack) {
 		
 		visited[v] = true;
 		recStack[v] = true;
 		
 		for (auto it = adj[v].begin(); it != adj[v].end(); it++) {
 			if (!visited[*it] && isCyclicUtil(*it, visited, recStack))
 				return true;
 			else if (recStack[*it])
 				return true;
 		}
 		
 		recStack[v] = false;
 		return false;
 	}
 	
 	bool isCyclic() {
 		vector<bool>visited(V, false);
 		vector<bool>recStack(V, false);
 		
 		for (int i = 0; i < V; i++) {
 			if (isCyclicUtil(i, visited, recStack))
 				return true;
 		}
 		
 		return false;
 	}
 	
 	void topologicalSortUtil(int v, vector<bool>&visited, vector<int>& res) {
 		visited[v] = true;
 		
 		for (auto it = adj[v].begin(); it != adj[v].end(); it++)
 			if (!visited[*it])
 				topologicalSortUtil(*it, visited, res);
 		
 		res.push_back(v);
 	}
 	
 	vector<int>topologicalSort(int v) {
 		vector<int>res;
 		
 		vector<bool>visited(V, false);
 		topologicalSortUtil(v, visited, res);
 		
 		for (int i = 0; i < V; i++) {
 			if (!visited[i])
 				topologicalSortUtil(i, visited, res);
 		}
 		
 		return res;
 	}
 	
 	public:
 	vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
 		V = numCourses;
 		adj = new list<int>[V];
 	
 		unordered_map<int, vector<int>>hm;
 		
 		for (int i = 0; i < prerequisites.size(); i++) {
 			adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
 			hm[prerequisites[i][1]].push_back(prerequisites[i][0]);
 		}
 		
 		if (isCyclic()) return vector<int>();
 		
 		int i = 0;
 		for (i = 0; i < V; i++) {
 			if (hm.find(i) == hm.end())
 				break;
 		}
 		
 		return topologicalSort(i);
 	}
};

Find Shortest Path (Dijkstra's/Bellman Ford)
https://leetcode.com/problems/network-delay-time/

Dijkstras and Bellman Ford:

class Solution {
	public:
		int networkDelayTime(vector<vector<int>>& times, int N, int K) {
			
			priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>pq;
			vector<int>dist(N+1, INT_MAX);
			
			pq.push(make_pair(0, K));
			dist[K] = 0;
			
			unordered_map<int, vector<pair<int, int>>>hm;
			for (int i = 0; i < times.size(); i++)
				hm[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));
			
			while (!pq.empty()) {
				pair<int, int>p = pq.top();
				pq.pop();
				
				int u = p.second;
				for (auto it = hm[u].begin(); it != hm[u].end(); it++) {
					int v = it->first;
					int w = it->second;
					
					if (dist[v] > dist[u] + w) {
						dist[v] = dist[u] + w;
						pq.push(make_pair(dist[v], v));
					}
				}
			}
			
			int res = 0;
			for (int i = 1; i <= N; i++)
				res = max(res, dist[i]);
			
			return res == INT_MAX ? -1 : res;
		}
	};
	

	class Solution {
	public:
		int networkDelayTime(vector<vector<int>>& times, int N, int K) {
			
			int n = times.size();
			if (!n) return 0;
			
			vector<int>dist(N+1, INT_MAX);
			int res = 0;
			
			dist[K] = 0;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < n; j++) {
					int u = times[j][0];
					int v = times[j][1];
					int w = times[j][2];
					if (dist[u] != INT_MAX && dist[u] + w < dist[v])
						dist[v] = w + dist[u];
				}
			}
			
			for (int i = 1; i <= N; i++)
				res = max(res, dist[i]);

			return res == INT_MAX ? -1 : res;
		}
	}
	

Complete List: Below are mostly list of problems (mostly medium level and may 1 or 2 easy) which are better to start practice with:
(Updated on 14th June '20)

Union Find:

https://leetcode.com/problems/friend-circles/
https://leetcode.com/problems/redundant-connection/
https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/
https://leetcode.com/problems/number-of-operations-to-make-network-connected/
https://leetcode.com/problems/satisfiability-of-equality-equations/
https://leetcode.com/problems/accounts-merge/
https://leetcode.com/problems/connecting-cities-with-minimum-cost/

DFS:
DFS from boundary:

https://leetcode.com/problems/surrounded-regions/
https://leetcode.com/problems/number-of-enclaves/
Shortest time:

https://leetcode.com/problems/time-needed-to-inform-all-employees/
Islands Variants

https://leetcode.com/problems/number-of-closed-islands/
https://leetcode.com/problems/number-of-islands/
https://leetcode.com/problems/keys-and-rooms/
https://leetcode.com/problems/max-area-of-island/
https://leetcode.com/problems/flood-fill/
https://leetcode.com/problems/coloring-a-border/
Hash/DFS:

https://leetcode.com/problems/employee-importance/
https://leetcode.com/problems/find-the-town-judge/
Cycle Find:

https://leetcode.com/problems/find-eventual-safe-states/

BFS:
BFS for shortest path:

https://leetcode.com/problems/01-matrix/
https://leetcode.com/problems/as-far-from-land-as-possible/
https://leetcode.com/problems/rotting-oranges/
https://leetcode.com/problems/shortest-path-in-binary-matrix/
Graph coloring:

https://leetcode.com/problems/possible-bipartition/
https://leetcode.com/problems/is-graph-bipartite/
Topological Sort:

https://leetcode.com/problems/course-schedule-ii/
Shortest Path:

https://leetcode.com/problems/network-delay-time/
https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/
https://leetcode.com/problems/cheapest-flights-within-k-stops/
Please correct the approach/solution if you find anything wrong.

Similar POST
DP: https://leetcode.com/discuss/general-discussion/662866/Dynamic-Programming-for-Practice-Problems-Patterns-and-Sample-Solutions
Sliding Window: https://leetcode.com/discuss/general-discussion/657507/Sliding-Window-for-Beginners-Problems-or-Template-or-Sample-Solutions